name: Build Images

env:
  resourceGroup: Compute-Gallery
  galleryName: Contoso

# defaults:
#   run:
#     shell: bash

concurrency: ${{ github.ref }}

on:
  push:
    branches: [main]

jobs:
  prepare:
    runs-on: ubuntu-latest

    outputs:
      matrix: ${{ steps.packer-definitions.outputs.matrix }}

    steps:
      - uses: actions/checkout@v2

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - run: npm install js-yaml

      - name: Get Image Definitions
        id: packer-definitions
        uses: actions/github-script@v6
        with:
          script: |
            const script = require('./.github/scripts/images.js');
            await script({github, context, core, glob, exec});

  build:
    needs: prepare
    runs-on: ubuntu-latest

    # this is needed to avoid workflow errors in case of an empty matrix
    # if: ${{ fromJSON( needs.prepare.outputs.matrix )[0] }}

    strategy:
      matrix: ${{ fromJson(needs.prepare.outputs.matrix) }}

    steps:
      - uses: actions/checkout@v2

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - run: echo "- **name**  ${{ matrix.name }}" >> $GITHUB_STEP_SUMMARY
      - run: echo "- **gallery**  ${{ matrix.gallery }}" >> $GITHUB_STEP_SUMMARY
      - run: echo "- **source**  ${{ matrix.source }}" >> $GITHUB_STEP_SUMMARY
      - run: echo "- **path**  ${{ matrix.path }}" >> $GITHUB_STEP_SUMMARY
      - run: echo "- **changed**  ${{ matrix.changed }}" >> $GITHUB_STEP_SUMMARY
      - run: echo "- **location**  ${{ matrix.location }}" >> $GITHUB_STEP_SUMMARY

      - name: Setup Packer
        uses: hashicorp-contrib/setup-packer@v1.0.0

      - name: Build Image
        timeout-minutes: 60
        working-directory: ${{ matrix.source }}
        run: |

          # run packer to build the image
          packer build -force \
            -var "image=${{ matrix.name }}" \
            -var "version=${{ matrix.version }}" \
            -var "location=${{ matrix.location }}" \
            -var "subscription=$(az account show --query 'id' -o tsv)" \
            -var "resourceGroup=${{ matrix.resourceGroup }}" \
            -var "galleryName=${{ matrix.gallery }}" \
            -var 'replicaLocations=${{ matrix.locations }}' \
            -var "branch=${{ github.ref }}" \
            -var "commit=${{ github.sha }}" \
            . # <== run in the current folder

          exit $?

  cleanup:
    needs: build
    runs-on: ubuntu-latest

    # ensure we always cleanup
    if: always()

    steps:
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Delete Artifacts
        run: |

          while read RESOURCEGROUP; do
            az group delete --resource-group $RESOURCEGROUP --no-wait --yes
          done < <(az group list --query "[?starts_with(@.name, 'pkr-Resource-Group-')].name" -o tsv)
